% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_ssm.R
\name{fit_ssm}
\alias{fit_ssm}
\title{Correlated Random Walk Filter}
\usage{
fit_ssm(d, tstep = 1, subset = rep(TRUE, nrow(d)), model = c("KF", "LS"),
  parameters = NULL, optim = c("nlminb", "optim"), verbose = FALSE,
  span = 0.1)
}
\arguments{
\item{d}{a data frame of observations including Argos KF error ellipse info}

\item{subset}{a logical vector indicating the subset of data records to be filtered}

\item{model}{the measurement error model to be used: `KF` or `LS`}

\item{optim}{numerical optimizer}

\item{verbose}{report progress during minimization}

\item{span}{the span parameter for the loess fits used to estimate
initial locations}

\item{ts}{the time step, in hours, to predict to}
}
\value{
a list with components
\item{\code{predicted}}{a data.frame of predicted location states}
\item{\code{fitted}}{a data.frame of fitted locations}
\item{\code{par}}{model parameter summmary}
\item{\code{data}}{the input data.frame}
\item{\code{subset}}{the inpu subset vector}
\item{\code{tstep}}{the prediction time step}
\item{\code{opt}}{the object returned by the optimizer}
\item{\code{tmb}}{the TMB object}
\item{\code{aic}}{the calculated Akaike Information Criterion}
}
\description{
Continuous-time Random Walk Filter
}
\details{
Fit a simple random walk in continuous time to filter Argos KF of LS data and predict
locations on a regular time step.
}
\examples{
\dontrun{
data(ellie)
fit <- ellie \%>\%
    prefilter(., min.dist = 100) \%>\%
    fit_ssm(ts = 6, subset = .$keep)

## fit LS measurement model
fit.ls <- ellie \%>\%
    select(1:5) \%>\%
    prefilter(., min.dist = 100) \%>\%
    fit_ssm(ts = 6, subset = .$keep, model = "LS")
}

}
